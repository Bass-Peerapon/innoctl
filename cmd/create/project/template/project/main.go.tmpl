package main

import (
	"fmt"
	"net"
	"net/http"
	"strings"

  myMiddL "{{.ModuleName}}/middleware"
	helperGRPC "git.innovasive.co.th/backend/grpc"
	"git.innovasive.co.th/backend/helper"
	helperMiddl "git.innovasive.co.th/backend/helper/middleware"
	helperRoute "git.innovasive.co.th/backend/helper/route"
	"git.innovasive.co.th/backend/psql"
  _util_tracing "{{.ModuleName}}/utils/opentracing"
	"github.com/getsentry/sentry-go"
	sentryecho "github.com/getsentry/sentry-go/echo"
	"github.com/labstack/echo/v4"
	echoMiddL "github.com/labstack/echo/v4/middleware"
	"github.com/opentracing/opentracing-go"
	"github.com/spf13/cast"
	"google.golang.org/grpc"
  "github.com/MicahParks/keyfunc/v3"

)

var (
	grpcMaxReceiveSize = (1024 * 1024) * cast.ToInt(helper.GetENV("GRPC_MAX_RECEIVE_SIZE", "4"))
)

var (
	APP_PORT                = helper.GetENV("APP_PORT", "3000")
	GRPC_PORT               = helper.GetENV("GRPC_PORT", "3100")
	ALLOW_ORIGIN            = strings.Split(helper.GetENV("ALLOW_ORIGIN", "*"), ",")
	ALLOW_ORIGIN_HEADER     = strings.Split(helper.GetENV("ALLOW_ORIGIN_HEADER", ""), ",")
	ALLOW_ORIGIN_CREDENTIAL = cast.ToBool(helper.GetENV("ALLOW_ORIGIN_CREDENTIAL", "false"))
	PSQL_DATABASE_URL       = helper.GetENV("PSQL_DATABASE_URL", "postgres://postgres:postgres@psql_db:5432/app_example?sslmode=disable")
	SENTRY_DSN              = helper.GetENV("SENTRY_DSN", "")
	JAEGER_SERVICE_NAME     = helper.GetENV("JAEGER_SERVICE_NAME", "")
  	JWKS_URL            	= strings.Split(helper.GetENV("JWKS_URL", ""), ",")

)

func sqlDBWithTracing(con string, tracer opentracing.Tracer) *psql.Client {
	db, err := psql.NewConnectionWithTracing(con, psql.Postgres, tracer)
	if err != nil {
		panic(err)
	}
	return db
}

func main() {
	// /* init sentry */
	sentryErr := sentry.Init(sentry.ClientOptions{
		Dsn: SENTRY_DSN,
	})
	// /* init tracing*/
  	tracer, closer := _util_tracing.Init("{{.ProjectName}}")
	defer closer.Close()
	opentracing.SetGlobalTracer(tracer)

	psqlClient := sqlDBWithTracing(PSQL_DATABASE_URL, tracer)
	defer psqlClient.GetClient().Close()

	// /* init grpc */
	server := helperGRPC.NewServer(JAEGER_SERVICE_NAME, SENTRY_DSN, grpc.MaxRecvMsgSize(grpcMaxReceiveSize))
	defer server.GracefulStop()

	e := echo.New()
	e.HTTPErrorHandler = helperMiddl.SentryCapture(e)
	helperRoute.RegisterVersion(e)
  	e.Use(echoMiddL.RequestLoggerWithConfig(echoMiddL.RequestLoggerConfig{
		LogError: true,
		LogValuesFunc: func(c echo.Context, values echoMiddL.RequestLoggerValues) error {
			if values.Error != nil {
				c.Logger().Error(values.Error)
			}
			return nil
		},
	}))
	e.Use(echoMiddL.Recover())
	e.Use(sentryecho.New(sentryecho.Options{Repanic: true}))
	e.GET("/", func(c echo.Context) error {
		return c.String(http.StatusOK, "Hello, World!")
	})
  	e.GET("/health-check", func(c echo.Context) error {
		resp := echo.Map{
			"status": "ok",
		}
		return c.JSON(http.StatusOK, resp)
	})



	middL := myMiddL.InitMiddleware()
	e.Use(echoMiddL.CORSWithConfig(echoMiddL.CORSConfig{
		Skipper:          echoMiddL.DefaultSkipper,
		AllowOrigins:     ALLOW_ORIGIN,
		AllowHeaders:     ALLOW_ORIGIN_HEADER,
		AllowMethods:     []string{http.MethodGet, http.MethodHead, http.MethodOptions, http.MethodPut, http.MethodPatch, http.MethodPost, http.MethodDelete},
		AllowCredentials: ALLOW_ORIGIN_CREDENTIAL,
	}))
	e.Use(middL.SetTracer)

  	jwks, err := keyfunc.NewDefault(JWKS_URL)
	if err != nil {
		panic(err)
	}

  	mw, err := myMiddL.CreateOpenapiMiddleware(
		jwks,
		nil,
	)
	if err != nil {
		panic(err)
	}
	e.Use(mw)



	/* repository */

	/* usecase */

	/* handler */

	/* gprc handler */

	/* validate */
	

	/* inject route */

	/* inject grpc route */

	/* serve gprc */
	go func() {
		if r := recover(); r != nil {
			fmt.Println("error on start grpc server: ", r.(error))
		}
		startGRPCServer(server)
	}()

	/* serve echo */
	port := fmt.Sprintf(":%s", APP_PORT)
	if sentryErr == nil {
		sentry.CaptureException(e.Start(port))
	} else {
		e.Logger.Fatal(e.Start(port))
	}
}

func startGRPCServer(server *grpc.Server) {
	listen, err := net.Listen("tcp", fmt.Sprintf(":%s", GRPC_PORT))
	if err != nil {
		panic("failed to listen: " + err.Error())
	}

	/* serve grpc */
	fmt.Printf("Start grpc Server [::%s]\n", GRPC_PORT)
	if err := server.Serve(listen); err != nil {
		panic(err)
	}
}
