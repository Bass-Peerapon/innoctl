package middleware

import (
	"context"

	"github.com/labstack/echo/v4"
)

type GoMiddlewareInf interface {
	InitContextIfNotExists(next echo.HandlerFunc) echo.HandlerFunc
	SetTracer(next echo.HandlerFunc) echo.HandlerFunc
	TransformResponse(next echo.HandlerFunc) echo.HandlerFunc
}

// GoMiddleware represent the data-struct for middleware
type GoMiddleware struct {
	// another stuff , may be needed by middleware
	ctx context.Context
}

func (m *GoMiddleware) InitContextIfNotExists(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		ctx := c.Request().Context()
		if ctx == nil {
			bgCtx := context.Background()
			newReq := c.Request().WithContext(bgCtx)

			c.SetRequest(newReq)
		}
		return next(c)
	}
}

// InitMiddleware intialize the middleware
func InitMiddleware() GoMiddlewareInf {
	return &GoMiddleware{
		ctx: context.TODO(),
	}
}
